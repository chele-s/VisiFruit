#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ Script de Prueba y Calibraci√≥n de Servos MG995
=================================================

Este script te permite probar y calibrar los servomotores MG995
del sistema de clasificaci√≥n del prototipo VisiFruit.

Caracter√≠sticas:
- Prueba individual de cada servo (manzanas, peras, limones)
- Prueba secuencial de todos los servos
- Calibraci√≥n de √°ngulos
- Verificaci√≥n de sistema de hold r√≠gido
- Monitoreo de oscilaciones

Autor(es): Gabriel Calder√≥n, Elias Bautista, Cristian Hernandez
Fecha: Septiembre 2025
Versi√≥n: 1.0
"""

import asyncio
import logging
import sys
from pathlib import Path

# A√±adir directorio padre al path
sys.path.insert(0, str(Path(__file__).parent.parent))

from Prototipo_Clasificador.mg995_servo_controller import MG995ServoController, FruitCategory
import json

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

async def load_config() -> dict:
    """Carga la configuraci√≥n del prototipo."""
    config_path = Path("Prototipo_Clasificador/Config_Prototipo.json")
    if not config_path.exists():
        logger.error(f"‚ùå No se encontr√≥ el archivo de configuraci√≥n: {config_path}")
        return {}
    
    with open(config_path, 'r', encoding='utf-8') as f:
        return json.load(f)

async def test_individual_servo(controller: MG995ServoController, category: FruitCategory):
    """
    Prueba un servo individual.
    
    Args:
        controller: Controlador de servos
        category: Categor√≠a a probar
    """
    print(f"\n{'='*60}")
    print(f"üß™ Probando Servo: {category.value.upper()}")
    print(f"{'='*60}")
    
    servo = controller.servos.get(category)
    if not servo:
        print(f"‚ùå Servo {category.value} no encontrado")
        return
    
    # Mostrar configuraci√≥n
    print(f"\nüìã Configuraci√≥n:")
    print(f"   Pin BCM: {servo.pin_bcm}")
    print(f"   Posici√≥n default: {servo.default_angle}¬∞")
    print(f"   Posici√≥n activaci√≥n: {servo.activation_angle}¬∞")
    print(f"   Movimiento: {servo.activation_angle - servo.default_angle:+.0f}¬∞")
    print(f"   Duraci√≥n hold: {servo.hold_duration_s}s")
    print(f"   Retorno suave: {'S√≠' if servo.return_smoothly else 'No'}")
    
    input(f"\nüëâ Presiona ENTER para activar el servo {category.value}...")
    
    # Activar servo
    print(f"\nüöÄ Activando servo...")
    success = await controller.activate_servo(category)
    
    if success:
        print(f"‚úÖ Servo {category.value} activado correctamente")
        print(f"\nüîç Verifica visualmente:")
        print(f"   1. El servo se movi√≥ {servo.activation_angle - servo.default_angle:+.0f}¬∞ sin oscilaciones")
        print(f"   2. Se mantuvo R√çGIDO en la posici√≥n por {servo.hold_duration_s}s")
        print(f"   3. Regres√≥ suavemente a la posici√≥n inicial")
        print(f"   4. Se detuvo completamente sin vibrar")
    else:
        print(f"‚ùå Error activando servo {category.value}")

async def test_all_servos_sequence(controller: MG995ServoController):
    """Prueba todos los servos en secuencia."""
    print(f"\n{'='*60}")
    print(f"üîÑ PRUEBA SECUENCIAL DE TODOS LOS SERVOS")
    print(f"{'='*60}")
    print(f"\nSe activar√°n los servos en orden:")
    print(f"   1. üçé Manzanas")
    print(f"   2. üçê Peras")
    print(f"   3. üçã Limones")
    
    input(f"\nüëâ Presiona ENTER para iniciar la secuencia...")
    
    categories = [FruitCategory.APPLE, FruitCategory.PEAR, FruitCategory.LEMON]
    
    for i, category in enumerate(categories, 1):
        print(f"\n{'='*60}")
        print(f"Servo {i}/3: {category.value.upper()}")
        print(f"{'='*60}")
        
        success = await controller.activate_servo(category)
        
        if success:
            print(f"‚úÖ Servo {category.value} completado")
        else:
            print(f"‚ùå Error en servo {category.value}")
        
        # Pausa entre servos
        if i < len(categories):
            print(f"\n‚è≥ Esperando 2 segundos antes del siguiente servo...")
            await asyncio.sleep(2)
    
    print(f"\n{'='*60}")
    print(f"‚úÖ Secuencia completada")
    print(f"{'='*60}")

async def test_rapid_activation(controller: MG995ServoController, category: FruitCategory):
    """Prueba activaci√≥n r√°pida para verificar protecci√≥n."""
    print(f"\n{'='*60}")
    print(f"‚ö° PRUEBA DE ACTIVACI√ìN R√ÅPIDA - {category.value.upper()}")
    print(f"{'='*60}")
    print(f"\nEsta prueba verifica que el sistema evite activaciones simult√°neas")
    
    input(f"\nüëâ Presiona ENTER para probar activaciones r√°pidas...")
    
    print(f"\nüöÄ Intentando 3 activaciones r√°pidas...")
    
    for i in range(3):
        print(f"\n   Activaci√≥n {i+1}/3:")
        success = await controller.activate_servo(category)
        if success:
            print(f"   ‚úÖ Activaci√≥n {i+1} aceptada")
        else:
            print(f"   ‚ö†Ô∏è Activaci√≥n {i+1} rechazada (esperado - protecci√≥n activa)")
        
        # Intentar activar r√°pidamente
        await asyncio.sleep(0.1)
    
    print(f"\n‚úÖ Prueba completada")
    print(f"   Solo una activaci√≥n deber√≠a haberse ejecutado")

async def calibration_mode(controller: MG995ServoController):
    """Modo de calibraci√≥n interactivo."""
    print(f"\n{'='*60}")
    print(f"üîß MODO DE CALIBRACI√ìN")
    print(f"{'='*60}")
    print(f"\nEste modo te permite mover los servos manualmente")
    print(f"para calibrar los √°ngulos correctos.\n")
    
    while True:
        print(f"\n{'='*60}")
        print(f"Selecciona un servo para calibrar:")
        print(f"  [1] üçé Manzanas")
        print(f"  [2] üçê Peras")
        print(f"  [3] üçã Limones")
        print(f"  [4] üè† Todos a posici√≥n inicial")
        print(f"  [0] Salir")
        print(f"{'='*60}")
        
        choice = input("\nüëâ Opci√≥n: ").strip()
        
        if choice == "0":
            break
        elif choice == "4":
            await controller.home_all_servos()
            print("‚úÖ Todos los servos en posici√≥n inicial")
            continue
        
        # Mapear opci√≥n a categor√≠a
        category_map = {
            "1": FruitCategory.APPLE,
            "2": FruitCategory.PEAR,
            "3": FruitCategory.LEMON
        }
        
        category = category_map.get(choice)
        if not category:
            print("‚ùå Opci√≥n inv√°lida")
            continue
        
        # Solicitar √°ngulo
        try:
            angle_str = input(f"   √Ångulo (0-180¬∞): ").strip()
            angle = float(angle_str)
            
            if angle < 0 or angle > 180:
                print("‚ùå √Ångulo debe estar entre 0 y 180")
                continue
            
            print(f"\nüîÑ Moviendo servo {category.value} a {angle}¬∞...")
            success = await controller.set_servo_angle(category, angle, hold=True)
            
            if success:
                print(f"‚úÖ Servo movido a {angle}¬∞")
                print(f"   El servo se mantiene en posici√≥n")
                
                hold = input(f"\n   ¬øMantener esta posici√≥n? (s/n): ").strip().lower()
                if hold != 's':
                    # Desactivar PWM
                    pwm = controller.pwm_objects.get(controller.servos[category].pin_bcm)
                    if pwm:
                        pwm.ChangeDutyCycle(0)
                    print("   PWM desactivado")
            else:
                print(f"‚ùå Error moviendo servo")
                
        except ValueError:
            print("‚ùå √Ångulo inv√°lido")

async def main():
    """Funci√≥n principal del script de prueba."""
    print("\n" + "="*60)
    print("üß™ VISIFRUIT - PRUEBA DE SERVOS MG995")
    print("="*60)
    print("\nScript de prueba y calibraci√≥n de servomotores")
    print("para el sistema de clasificaci√≥n del prototipo\n")
    
    # Cargar configuraci√≥n
    config = await load_config()
    if not config:
        print("‚ùå Error cargando configuraci√≥n")
        return 1
    
    # Crear controlador
    controller = MG995ServoController(config)
    
    # Inicializar
    print("üîß Inicializando controlador de servos...")
    if not await controller.initialize():
        print("‚ùå Error inicializando controlador")
        return 1
    
    print("‚úÖ Controlador inicializado correctamente\n")
    
    try:
        while True:
            print("\n" + "="*60)
            print("MEN√ö DE PRUEBAS")
            print("="*60)
            print("  [1] Probar servo de MANZANAS üçé")
            print("  [2] Probar servo de PERAS üçê")
            print("  [3] Probar servo de LIMONES üçã")
            print("  [4] Probar TODOS los servos en secuencia")
            print("  [5] Prueba de activaci√≥n r√°pida (protecci√≥n)")
            print("  [6] Modo de CALIBRACI√ìN")
            print("  [7] Resetear todos a posici√≥n inicial")
            print("  [0] Salir")
            print("="*60)
            
            choice = input("\nüëâ Selecciona una opci√≥n: ").strip()
            
            if choice == "0":
                break
            elif choice == "1":
                await test_individual_servo(controller, FruitCategory.APPLE)
            elif choice == "2":
                await test_individual_servo(controller, FruitCategory.PEAR)
            elif choice == "3":
                await test_individual_servo(controller, FruitCategory.LEMON)
            elif choice == "4":
                await test_all_servos_sequence(controller)
            elif choice == "5":
                print("\nSelecciona servo para prueba r√°pida:")
                print("  [1] Manzanas")
                print("  [2] Peras")
                print("  [3] Limones")
                test_choice = input("üëâ Opci√≥n: ").strip()
                cat_map = {"1": FruitCategory.APPLE, "2": FruitCategory.PEAR, "3": FruitCategory.LEMON}
                if test_choice in cat_map:
                    await test_rapid_activation(controller, cat_map[test_choice])
            elif choice == "6":
                await calibration_mode(controller)
            elif choice == "7":
                print("\nüè† Regresando todos los servos a posici√≥n inicial...")
                await controller.home_all_servos()
                print("‚úÖ Completado")
            else:
                print("‚ùå Opci√≥n inv√°lida")
    
    except KeyboardInterrupt:
        print("\n\n‚ö° Interrumpido por usuario")
    finally:
        print("\nüßπ Limpiando recursos...")
        await controller.cleanup()
        print("‚úÖ Limpieza completada")
    
    print("\nüëã ¬°Hasta luego!\n")
    return 0

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except Exception as e:
        print(f"\n‚ùå Error fatal: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
